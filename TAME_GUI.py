#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.1 on Wed Aug 25 16:10:55 2021
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import matplotlib_canvas
from GroupListViewTASS import GroupListViewTame
from ObjectListView import ObjectListView
from ObjectListViewTASS import ObjectListViewTame
# end wxGlade


class mainWindow(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: mainWindow.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.MAXIMIZE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetTitle("Term Analysis Made Easy (TAME)")

        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "New Project", "")
        self.Bind(wx.EVT_MENU, self.on_New, item)
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Open ...", "")
        self.Bind(wx.EVT_MENU, self.on_Open, item)
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Save", "")
        self.Bind(wx.EVT_MENU, self.on_Save, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Save As ...", "")
        self.Bind(wx.EVT_MENU, self.on_Save_As, item)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu_sub = wx.Menu()
        item = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "Matched Linelist (.lin)", "")
        self.Bind(wx.EVT_MENU, self.on_export_matched_linelist, item)
        item = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "Complete Linelist (.lin)", "")
        self.Bind(wx.EVT_MENU, self.on_export_full_linelist, item)
        wxglade_tmp_menu_sub.AppendSeparator()
        item = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "LOPT Levels (.llf)", "")
        self.Bind(wx.EVT_MENU, self.on_export_lopt_levs, item)
        wxglade_tmp_menu.Append(wx.ID_ANY, "Export ...", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
        self.Bind(wx.EVT_MENU, self.on_Exit, item)
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Strans (partial)", "")
        self.Bind(wx.EVT_MENU, self.on_partial_strans, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Strans (full)", "")
        self.Bind(wx.EVT_MENU, self.on_full_strans, item)
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "LOPT", "")
        self.Bind(wx.EVT_MENU, self.on_lopt, item)
        self.frame_menubar.Append(wxglade_tmp_menu, "Run")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Fixed Levels", "")
        self.Bind(wx.EVT_MENU, self.on_edit_fixed_levels, item)
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Preferences", "")
        self.Bind(wx.EVT_MENU, self.on_preferences, item)
        self.frame_menubar.Append(wxglade_tmp_menu, "Edit")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Manual", "")
        self.Bind(wx.EVT_MENU, self.on_manual, item)
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "About", "")
        self.Bind(wx.EVT_MENU, self.on_about, item)
        self.frame_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end

        self.frame_statusbar = self.CreateStatusBar(1)
        self.frame_statusbar.SetStatusWidths([-1])

        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1, style=wx.TB_FLAT)
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "New", wx.ArtProvider.GetBitmap(wx.ART_NEW, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "", "New Project")
        self.Bind(wx.EVT_TOOL, self.on_New, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Project Open", wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "", "Open Project")
        self.Bind(wx.EVT_TOOL, self.on_Open, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Save", wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "", "Save Project")
        self.Bind(wx.EVT_TOOL, self.on_Save, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Save As", wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE_AS, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "", "Save Project As")
        self.Bind(wx.EVT_TOOL, self.on_Save_As, id=tool.GetId())
        self.frame_toolbar.AddSeparator()
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Run Strans", wx.ArtProvider.GetBitmap(wx.ART_GO_FORWARD, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "", "Run STRANS")
        self.Bind(wx.EVT_TOOL, self.on_full_strans, id=tool.GetId())
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Run Lopt", wx.ArtProvider.GetBitmap(wx.ART_GOTO_LAST, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "", "Run LOPT")
        self.Bind(wx.EVT_TOOL, self.on_lopt, id=tool.GetId())
        self.frame_toolbar.AddSeparator()
        tool = self.frame_toolbar.AddTool(wx.ID_ANY, "Help", wx.ArtProvider.GetBitmap(wx.ART_HELP, wx.ART_TOOLBAR, (24, 24)), wx.NullBitmap, wx.ITEM_NORMAL, "", "TAME Help")
        self.Bind(wx.EVT_TOOL, self.on_about, id=tool.GetId())
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.Realize()
        # Tool Bar end

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.main_panel = wx.Notebook(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.main_panel, 1, wx.EXPAND, 0)

        self.STRANS = wx.Panel(self.main_panel, wx.ID_ANY)
        self.main_panel.AddPage(self.STRANS, "STRANS")

        strans_main_sizer = wx.BoxSizer(wx.VERTICAL)

        self.window_1 = wx.SplitterWindow(self.STRANS, wx.ID_ANY)
        self.window_1.SetMinimumPaneSize(20)
        strans_main_sizer.Add(self.window_1, 1, wx.EXPAND, 0)

        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_16, 0, wx.ALL | wx.EXPAND, 3)

        label_1 = wx.StaticText(self.window_1_pane_1, wx.ID_ANY, "Input Levels")
        label_1.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_16.Add(label_1, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.FIXED_MINSIZE, 2)

        self.strans_level_search = wx.SearchCtrl(self.window_1_pane_1, wx.ID_ANY, "", style=wx.TE_LEFT)
        self.strans_level_search.ShowCancelButton(True)
        self.strans_level_search.SetDescriptiveText("Search Levels")
        sizer_16.Add(self.strans_level_search, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.FIXED_MINSIZE, 2)

        self.strans_lev_ojlv = ObjectListViewTame(self.window_1_pane_1, wx.ID_ANY, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        sizer_2.Add(self.strans_lev_ojlv, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 3)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_6, 0, wx.EXPAND, 0)

        self.strans_add_levels_btn = wx.Button(self.window_1_pane_1, wx.ID_ANY, "Add Level")
        sizer_6.Add(self.strans_add_levels_btn, 1, wx.ALL | wx.EXPAND, 1)

        self.strans_del_levels_btn = wx.Button(self.window_1_pane_1, wx.ID_ANY, "Delete Level(s)")
        sizer_6.Add(self.strans_del_levels_btn, 1, wx.ALL, 1)

        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(sizer_15, 0, wx.ALL | wx.EXPAND, 3)

        label_2 = wx.StaticText(self.window_1_pane_2, wx.ID_ANY, "Identified Lines")
        label_2.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_15.Add(label_2, 4, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.FIXED_MINSIZE, 2)

        self.strans_line_search = wx.SearchCtrl(self.window_1_pane_2, wx.ID_ANY, "", style=wx.TE_LEFT)
        self.strans_line_search.ShowCancelButton(True)
        self.strans_line_search.SetDescriptiveText("Search Lines")
        sizer_15.Add(self.strans_line_search, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.FIXED_MINSIZE, 2)

        self.strans_lines_ojlv = ObjectListView(self.window_1_pane_2, wx.ID_ANY, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        sizer_5.Add(self.strans_lines_ojlv, 1, wx.ALL | wx.EXPAND, 3)

        self.LOPT = wx.Panel(self.main_panel, wx.ID_ANY)
        self.main_panel.AddPage(self.LOPT, "LOPT")

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        self.window_2 = wx.SplitterWindow(self.LOPT, wx.ID_ANY)
        self.window_2.SetMinimumPaneSize(20)
        sizer_3.Add(self.window_2, 1, wx.EXPAND, 0)

        self.window_2_pane_1 = wx.Panel(self.window_2, wx.ID_ANY)

        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)

        self.lopt_lev_ojlv = GroupListViewTame(self.window_2_pane_1, wx.ID_ANY, style=wx.LC_REPORT|wx.SUNKEN_BORDER|wx.LC_SINGLE_SEL)
        sizer_7.Add(self.lopt_lev_ojlv, 1, wx.ALL | wx.EXPAND, 3)

        self.window_2_pane_2 = wx.Panel(self.window_2, wx.ID_ANY)

        self.sizer_8 = wx.BoxSizer(wx.HORIZONTAL)

        self.lopt_level_panel = wx.Panel(self.window_2_pane_2, wx.ID_ANY)
        self.sizer_8.Add(self.lopt_level_panel, 1, wx.ALL | wx.EXPAND, 3)

        sizer_10 = wx.BoxSizer(wx.VERTICAL)

        self.lopt_lev_panel_header = wx.StaticText(self.lopt_level_panel, wx.ID_ANY, "Level Panel", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.lopt_lev_panel_header.SetMinSize((-1, 30))
        self.lopt_lev_panel_header.SetFont(wx.Font(20, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_10.Add(self.lopt_lev_panel_header, 0, wx.EXPAND, 0)

        sizer_17 = wx.StaticBoxSizer(wx.StaticBox(self.lopt_level_panel, wx.ID_ANY, "Level Fit Details"), wx.HORIZONTAL)
        sizer_10.Add(sizer_17, 0, wx.ALL | wx.EXPAND, 3)

        self.lopt_level_listctrl = wx.ListCtrl(self.lopt_level_panel, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.lopt_level_listctrl.AppendColumn(" Energy (cm-1)", format=wx.LIST_FORMAT_LEFT, width=150)
        self.lopt_level_listctrl.AppendColumn("D1", format=wx.LIST_FORMAT_LEFT, width=100)
        self.lopt_level_listctrl.AppendColumn("D2", format=wx.LIST_FORMAT_LEFT, width=100)
        self.lopt_level_listctrl.AppendColumn("D3", format=wx.LIST_FORMAT_LEFT, width=100)
        self.lopt_level_listctrl.AppendColumn("No. Lines", format=wx.LIST_FORMAT_LEFT, width=100)
        self.lopt_level_listctrl.AppendColumn("LOPT Comments", format=wx.LIST_FORMAT_LEFT, width=300)
        sizer_17.Add(self.lopt_level_listctrl, 1, wx.ALL | wx.EXPAND, 3)

        sizer_18 = wx.StaticBoxSizer(wx.StaticBox(self.lopt_level_panel, wx.ID_ANY, "Level Comments"), wx.HORIZONTAL)
        sizer_10.Add(sizer_18, 1, wx.ALL | wx.EXPAND, 3)

        self.lopt_level_comments = wx.TextCtrl(self.lopt_level_panel, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE)
        sizer_18.Add(self.lopt_level_comments, 1, wx.ALL | wx.EXPAND, 3)

        self.lopt_line_panel = wx.Panel(self.window_2_pane_2, wx.ID_ANY)
        self.sizer_8.Add(self.lopt_line_panel, 1, wx.ALL | wx.EXPAND, 3)

        self.sizer_11 = wx.BoxSizer(wx.VERTICAL)

        self.lopt_line_panel_header = wx.StaticText(self.lopt_line_panel, wx.ID_ANY, "Line Panel", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.lopt_line_panel_header.SetMinSize((-1, 20))
        self.lopt_line_panel_header.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_SLANT, wx.FONTWEIGHT_BOLD, 0, ""))
        self.sizer_11.Add(self.lopt_line_panel_header, 0, wx.ALL | wx.EXPAND, 3)

        sizer_12 = wx.StaticBoxSizer(wx.StaticBox(self.lopt_line_panel, wx.ID_ANY, "Transitions"), wx.HORIZONTAL)
        self.sizer_11.Add(sizer_12, 2, wx.ALL | wx.EXPAND, 3)

        self.lopt_line_listctrl = wx.ListCtrl(self.lopt_line_panel, wx.ID_ANY, style=wx.BORDER_THEME | wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.lopt_line_listctrl.AppendColumn("       Element", format=wx.LIST_FORMAT_LEFT, width=100)
        self.lopt_line_listctrl.AppendColumn("Upper Level", format=wx.LIST_FORMAT_LEFT, width=200)
        self.lopt_line_listctrl.AppendColumn("Lower Level", format=wx.LIST_FORMAT_LEFT, width=200)
        self.lopt_line_listctrl.AppendColumn("Obs - Calc", format=wx.LIST_FORMAT_LEFT, width=200)
        sizer_12.Add(self.lopt_line_listctrl, 1, wx.ALL | wx.EXPAND, 5)

        sizer_14 = wx.StaticBoxSizer(wx.StaticBox(self.lopt_line_panel, wx.ID_ANY, "Line Comments"), wx.VERTICAL)
        self.sizer_11.Add(sizer_14, 2, wx.ALL | wx.EXPAND, 3)

        self.lopt_line_comments_txtctrl = wx.TextCtrl(self.lopt_line_panel, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_PROCESS_ENTER)
        sizer_14.Add(self.lopt_line_comments_txtctrl, 1, wx.ALL | wx.EXPAND, 5)

        sizer_13 = wx.StaticBoxSizer(wx.StaticBox(self.lopt_line_panel, wx.ID_ANY, "Line Tags"), wx.HORIZONTAL)
        self.sizer_11.Add(sizer_13, 0, wx.ALL | wx.EXPAND, 3)

        grid_sizer_1 = wx.GridSizer(1, 4, 0, 0)
        sizer_13.Add(grid_sizer_1, 1, wx.ALL, 5)

        self.ringing_chkbox = wx.CheckBox(self.lopt_line_panel, wx.ID_ANY, "Ringing")
        grid_sizer_1.Add(self.ringing_chkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.noise_chkbox = wx.CheckBox(self.lopt_line_panel, wx.ID_ANY, "Noise")
        grid_sizer_1.Add(self.noise_chkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.blend_chkbox = wx.CheckBox(self.lopt_line_panel, wx.ID_ANY, "Blend")
        grid_sizer_1.Add(self.blend_chkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1.Add(sizer_9, 1, wx.EXPAND, 0)

        self.user_unc_chkbox = wx.CheckBox(self.lopt_line_panel, wx.ID_ANY, "User Uncertainty (cm-1)")
        sizer_9.Add(self.user_unc_chkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.user_unc_txtctrl = wx.TextCtrl(self.lopt_line_panel, wx.ID_ANY, "")
        sizer_9.Add(self.user_unc_txtctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_13.Add((20, 50), 0, wx.EXPAND, 0)

        self.matplotlib_sizer = wx.StaticBoxSizer(wx.StaticBox(self.lopt_line_panel, wx.ID_ANY, "Plot"), wx.VERTICAL)
        self.sizer_11.Add(self.matplotlib_sizer, 6, wx.ALL | wx.EXPAND, 3)

        self.matplotlib_canvas = matplotlib_canvas.MatplotlibCanvas(self.lopt_line_panel, wx.ID_ANY)
        self.matplotlib_sizer.Add(self.matplotlib_canvas, 1, wx.ALL | wx.EXPAND, 2)

        self.LEVHAMS = wx.Panel(self.main_panel, wx.ID_ANY)
        self.main_panel.AddPage(self.LEVHAMS, "LEVHAMS")

        sizer_4 = wx.BoxSizer(wx.VERTICAL)

        sizer_4.Add((0, 0), 0, 0, 0)

        self.LEVHAMS.SetSizer(sizer_4)

        self.lopt_line_panel.SetSizer(self.sizer_11)

        self.lopt_level_panel.SetSizer(sizer_10)

        self.window_2_pane_2.SetSizer(self.sizer_8)

        self.window_2_pane_1.SetSizer(sizer_7)

        self.window_2.SplitVertically(self.window_2_pane_1, self.window_2_pane_2)

        self.LOPT.SetSizer(sizer_3)

        self.window_1_pane_2.SetSizer(sizer_5)

        self.window_1_pane_1.SetSizer(sizer_2)

        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2)

        self.STRANS.SetSizer(strans_main_sizer)

        self.panel_1.SetSizer(sizer_1)

        sizer_1.Fit(self)
        self.Layout()

        self.Bind(wx.EVT_TEXT, self.on_strans_lev_search, self.strans_level_search)
        self.Bind(wx.EVT_BUTTON, self.on_strans_add, self.strans_add_levels_btn)
        self.Bind(wx.EVT_BUTTON, self.on_strans_del, self.strans_del_levels_btn)
        self.Bind(wx.EVT_TEXT, self.on_strans_line_search, self.strans_line_search)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_click_lopt_levs, self.lopt_lev_ojlv)
        self.Bind(wx.EVT_TEXT, self.on_lopt_lev_comments, self.lopt_level_comments)
        self.Bind(wx.EVT_LIST_ITEM_CHECKED, self.on_lopt_trans_checked, self.lopt_line_listctrl)
        self.Bind(wx.EVT_LIST_ITEM_UNCHECKED, self.on_lopt_trans_unchecked, self.lopt_line_listctrl)
        self.Bind(wx.EVT_TEXT, self.on_lopt_line_comments, self.lopt_line_comments_txtctrl)
        self.Bind(wx.EVT_CHECKBOX, self.on_ringing_tag, self.ringing_chkbox)
        self.Bind(wx.EVT_CHECKBOX, self.on_noise_tag, self.noise_chkbox)
        self.Bind(wx.EVT_CHECKBOX, self.on_blend_tag, self.blend_chkbox)
        self.Bind(wx.EVT_CHECKBOX, self.on_user_unc_tag, self.user_unc_chkbox)
        self.Bind(wx.EVT_CLOSE, self.on_Exit, self)
        # end wxGlade

    def on_New(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_New' not implemented!")
        event.Skip()

    def on_Open(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_Open' not implemented!")
        event.Skip()

    def on_Save(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_Save' not implemented!")
        event.Skip()

    def on_Save_As(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_Save_As' not implemented!")
        event.Skip()

    def on_export_matched_linelist(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_export_matched_linelist' not implemented!")
        event.Skip()

    def on_export_full_linelist(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_export_full_linelist' not implemented!")
        event.Skip()

    def on_export_lopt_levs(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_export_lopt_levs' not implemented!")
        event.Skip()

    def on_Exit(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_Exit' not implemented!")
        event.Skip()

    def on_partial_strans(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_partial_strans' not implemented!")
        event.Skip()

    def on_full_strans(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_full_strans' not implemented!")
        event.Skip()

    def on_lopt(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_lopt' not implemented!")
        event.Skip()

    def on_edit_fixed_levels(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_edit_fixed_levels' not implemented!")
        event.Skip()

    def on_preferences(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_preferences' not implemented!")
        event.Skip()

    def on_manual(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_manual' not implemented!")
        event.Skip()

    def on_about(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_about' not implemented!")
        event.Skip()

    def on_strans_lev_search(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_strans_lev_search' not implemented!")
        event.Skip()

    def on_strans_add(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_strans_add' not implemented!")
        event.Skip()

    def on_strans_del(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_strans_del' not implemented!")
        event.Skip()

    def on_strans_line_search(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_strans_line_search' not implemented!")
        event.Skip()

    def on_click_lopt_levs(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_click_lopt_levs' not implemented!")
        event.Skip()

    def on_lopt_lev_comments(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_lopt_lev_comments' not implemented!")
        event.Skip()

    def on_lopt_trans_checked(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_lopt_trans_checked' not implemented!")
        event.Skip()

    def on_lopt_trans_unchecked(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_lopt_trans_unchecked' not implemented!")
        event.Skip()

    def on_lopt_line_comments(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_lopt_line_comments' not implemented!")
        event.Skip()

    def on_ringing_tag(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_ringing_tag' not implemented!")
        event.Skip()

    def on_noise_tag(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_noise_tag' not implemented!")
        event.Skip()

    def on_blend_tag(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_blend_tag' not implemented!")
        event.Skip()

    def on_user_unc_tag(self, event):  # wxGlade: mainWindow.<event_handler>
        print("Event handler 'on_user_unc_tag' not implemented!")
        event.Skip()

# end of class mainWindow

class newProjectDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: newProjectDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((900, 600))
        self.SetTitle("dialog")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.new_project_nb = wx.Notebook(self, wx.ID_ANY, style=0)
        sizer_1.Add(self.new_project_nb, 1, wx.EXPAND, 0)

        self.Main_Element = wx.Panel(self.new_project_nb, wx.ID_ANY)
        self.new_project_nb.AddPage(self.Main_Element, "Main Element")

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        label_6 = wx.StaticText(self.Main_Element, wx.ID_ANY, "New Tame Project Setup")
        label_6.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_5.Add(label_6, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        sizer_5.Add((20, 20), 0, 0, 0)

        label_11 = wx.StaticText(self.Main_Element, wx.ID_ANY, "Main Element")
        label_11.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_5.Add(label_11, 0, wx.ALL, 3)

        grid_sizer_2 = wx.FlexGridSizer(6, 3, 10, 10)
        sizer_5.Add(grid_sizer_2, 1, wx.ALL | wx.EXPAND, 10)

        label_7 = wx.StaticText(self.Main_Element, wx.ID_ANY, "Project name")
        grid_sizer_2.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.project_name_tc = wx.TextCtrl(self.Main_Element, wx.ID_ANY, "")
        grid_sizer_2.Add(self.project_name_tc, 0, wx.EXPAND, 0)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        label_14 = wx.StaticText(self.Main_Element, wx.ID_ANY, "Project folder")
        grid_sizer_2.Add(label_14, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.project_path_tc = wx.TextCtrl(self.Main_Element, wx.ID_ANY, "")
        grid_sizer_2.Add(self.project_path_tc, 0, wx.EXPAND, 0)

        self.button_16 = wx.Button(self.Main_Element, wx.ID_ANY, "...")
        grid_sizer_2.Add(self.button_16, 0, 0, 0)

        label_8 = wx.StaticText(self.Main_Element, wx.ID_ANY, "Element short name")
        grid_sizer_2.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.element_name_tc = wx.TextCtrl(self.Main_Element, wx.ID_ANY, "")
        grid_sizer_2.Add(self.element_name_tc, 0, wx.EXPAND, 0)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        label_9 = wx.StaticText(self.Main_Element, wx.ID_ANY, "Main element level file")
        grid_sizer_2.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.main_lev_file_tc = wx.TextCtrl(self.Main_Element, wx.ID_ANY, "", style=wx.TE_READONLY)
        grid_sizer_2.Add(self.main_lev_file_tc, 0, wx.EXPAND, 0)

        self.button_6 = wx.Button(self.Main_Element, wx.ID_ANY, "...")
        grid_sizer_2.Add(self.button_6, 0, 0, 0)

        label_10 = wx.StaticText(self.Main_Element, wx.ID_ANY, "Linelist file")
        grid_sizer_2.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.linelist_file_tc = wx.TextCtrl(self.Main_Element, wx.ID_ANY, "", style=wx.TE_READONLY)
        grid_sizer_2.Add(self.linelist_file_tc, 0, wx.EXPAND, 0)

        self.button_7 = wx.Button(self.Main_Element, wx.ID_ANY, "...")
        grid_sizer_2.Add(self.button_7, 0, 0, 0)

        label_13 = wx.StaticText(self.Main_Element, wx.ID_ANY, "Sprectrum plot files")
        grid_sizer_2.Add(label_13, 0, 0, 0)

        self.plot_file_tc = wx.TextCtrl(self.Main_Element, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        grid_sizer_2.Add(self.plot_file_tc, 0, wx.EXPAND, 0)

        self.button_11 = wx.Button(self.Main_Element, wx.ID_ANY, "...")
        grid_sizer_2.Add(self.button_11, 0, wx.ALIGN_BOTTOM, 0)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(sizer_6, 0, wx.ALIGN_RIGHT, 0)

        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(sizer_7, 1, wx.ALIGN_RIGHT | wx.ALL, 5)

        self.button_8 = wx.Button(self.Main_Element, wx.ID_CANCEL, "")
        sizer_7.Add(self.button_8, 0, wx.ALL, 3)

        self.button_9 = wx.Button(self.Main_Element, wx.ID_ANY, "Back")
        sizer_7.Add(self.button_9, 0, wx.ALL, 3)

        self.button_10 = wx.Button(self.Main_Element, wx.ID_ANY, "Next")
        sizer_7.Add(self.button_10, 0, wx.ALL, 3)

        self.Other_Elements = wx.Panel(self.new_project_nb, wx.ID_ANY)
        self.new_project_nb.AddPage(self.Other_Elements, "Other Elements")

        sizer_8 = wx.BoxSizer(wx.VERTICAL)

        label_12 = wx.StaticText(self.Other_Elements, wx.ID_ANY, "New Tame Project Setup")
        label_12.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_8.Add(label_12, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)

        sizer_8.Add((20, 20), 0, 0, 0)

        label_16 = wx.StaticText(self.Other_Elements, wx.ID_ANY, "Other Elements")
        label_16.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        sizer_8.Add(label_16, 0, wx.ALL, 3)

        grid_sizer_3 = wx.FlexGridSizer(1, 3, 10, 10)
        sizer_8.Add(grid_sizer_3, 1, wx.ALL | wx.EXPAND, 10)

        label_15 = wx.StaticText(self.Other_Elements, wx.ID_ANY, "Other element level files")
        grid_sizer_3.Add(label_15, 0, 0, 0)

        self.other_lev_files_tc = wx.TextCtrl(self.Other_Elements, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        grid_sizer_3.Add(self.other_lev_files_tc, 1, wx.EXPAND, 0)

        self.button_12 = wx.Button(self.Other_Elements, wx.ID_ANY, "...")
        grid_sizer_3.Add(self.button_12, 0, wx.ALIGN_BOTTOM, 0)

        label_17 = wx.StaticText(self.Other_Elements, wx.ID_ANY, "Specify element short names:")
        sizer_8.Add(label_17, 0, wx.ALL, 5)

        self.other_element_levs_ojlv = ObjectListViewTame(self.Other_Elements, wx.ID_ANY, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        sizer_8.Add(self.other_element_levs_ojlv, 1, wx.ALL | wx.EXPAND, 10)

        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_8.Add(sizer_9, 0, wx.ALIGN_RIGHT, 0)

        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(sizer_10, 1, wx.ALIGN_RIGHT | wx.ALL, 5)

        self.button_13 = wx.Button(self.Other_Elements, wx.ID_CANCEL, "")
        sizer_10.Add(self.button_13, 0, wx.ALL, 3)

        self.button_14 = wx.Button(self.Other_Elements, wx.ID_ANY, "Back")
        sizer_10.Add(self.button_14, 0, wx.ALL, 3)

        self.button_15 = wx.Button(self.Other_Elements, wx.ID_OK, "")
        sizer_10.Add(self.button_15, 0, wx.ALL, 3)

        grid_sizer_3.AddGrowableRow(0)
        grid_sizer_3.AddGrowableCol(1)

        self.Other_Elements.SetSizer(sizer_8)

        grid_sizer_2.AddGrowableRow(5)
        grid_sizer_2.AddGrowableCol(1)

        self.Main_Element.SetSizer(sizer_5)

        self.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.on_project_file_btn, self.button_16)
        self.Bind(wx.EVT_BUTTON, self.on_main_lev_file_btn, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.on_linelist_file_btn, self.button_7)
        self.Bind(wx.EVT_BUTTON, self.on_plot_files_btn, self.button_11)
        self.Bind(wx.EVT_BUTTON, self.on_cancel, self.button_8)
        self.Bind(wx.EVT_BUTTON, self.on_next, self.button_10)
        self.Bind(wx.EVT_BUTTON, self.on_other_lev_files_btn, self.button_12)
        self.Bind(wx.EVT_BUTTON, self.on_cancel, self.button_13)
        self.Bind(wx.EVT_BUTTON, self.on_back, self.button_14)
        self.Bind(wx.EVT_BUTTON, self.on_ok, self.button_15)
        # end wxGlade

    def on_project_file_btn(self, event):  # wxGlade: newProjectDialog.<event_handler>
        print("Event handler 'on_project_file_btn' not implemented!")
        event.Skip()

    def on_main_lev_file_btn(self, event):  # wxGlade: newProjectDialog.<event_handler>
        print("Event handler 'on_main_lev_file_btn' not implemented!")
        event.Skip()

    def on_linelist_file_btn(self, event):  # wxGlade: newProjectDialog.<event_handler>
        print("Event handler 'on_linelist_file_btn' not implemented!")
        event.Skip()

    def on_plot_files_btn(self, event):  # wxGlade: newProjectDialog.<event_handler>
        print("Event handler 'on_plot_files_btn' not implemented!")
        event.Skip()

    def on_cancel(self, event):  # wxGlade: newProjectDialog.<event_handler>
        print("Event handler 'on_cancel' not implemented!")
        event.Skip()

    def on_next(self, event):  # wxGlade: newProjectDialog.<event_handler>
        print("Event handler 'on_next' not implemented!")
        event.Skip()

    def on_other_lev_files_btn(self, event):  # wxGlade: newProjectDialog.<event_handler>
        print("Event handler 'on_other_lev_files_btn' not implemented!")
        event.Skip()

    def on_back(self, event):  # wxGlade: newProjectDialog.<event_handler>
        print("Event handler 'on_back' not implemented!")
        event.Skip()

    def on_ok(self, event):  # wxGlade: newProjectDialog.<event_handler>
        print("Event handler 'on_ok' not implemented!")
        event.Skip()

# end of class newProjectDialog

class fixedLevelsDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: fixedLevelsDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("LOPT Fixed Level Selection")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Please select fixed levels for LOPT.\n\nAt least one level must be selected.", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        self.fixed_level_lc = wx.ListCtrl(self, wx.ID_ANY, style=wx.BORDER_THEME | wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
        self.fixed_level_lc.SetMinSize((500, 500))
        self.fixed_level_lc.AppendColumn("          Level", format=wx.LIST_FORMAT_LEFT, width=200)
        self.fixed_level_lc.AppendColumn("Energy (cm-1)", format=wx.LIST_FORMAT_LEFT, width=200)
        sizer_1.Add(self.fixed_level_lc, 1, wx.ALL | wx.EXPAND, 10)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_LIST_ITEM_CHECKED, self.on_fixed_lev_checked, self.fixed_level_lc)
        self.Bind(wx.EVT_LIST_ITEM_UNCHECKED, self.on_fixed_lev_unchecked, self.fixed_level_lc)
        self.Bind(wx.EVT_BUTTON, self.on_fixed_lev_ok, self.button_OK)
        # end wxGlade

    def on_fixed_lev_checked(self, event):  # wxGlade: fixedLevelsDialog.<event_handler>
        print("Event handler 'on_fixed_lev_checked' not implemented!")
        event.Skip()

    def on_fixed_lev_unchecked(self, event):  # wxGlade: fixedLevelsDialog.<event_handler>
        print("Event handler 'on_fixed_lev_unchecked' not implemented!")
        event.Skip()

    def on_fixed_lev_ok(self, event):  # wxGlade: fixedLevelsDialog.<event_handler>
        print("Event handler 'on_fixed_lev_ok' not implemented!")
        event.Skip()

# end of class fixedLevelsDialog

class propertiesDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: propertiesDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("TAME Properties")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_4 = wx.GridBagSizer(5, 5)
        sizer_1.Add(grid_sizer_4, 1, wx.ALL | wx.EXPAND, 10)

        label_4 = wx.StaticText(self, wx.ID_ANY, "General")
        label_4.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 1, ""))
        grid_sizer_4.Add(label_4, (0, 0), (1, 2), wx.BOTTOM | wx.RIGHT | wx.TOP, 5)

        label_8 = wx.StaticText(self, wx.ID_ANY, "STRANS")
        label_8.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 1, ""))
        grid_sizer_4.Add(label_8, (1, 0), (1, 2), wx.BOTTOM | wx.RIGHT | wx.TOP, 5)

        label_9 = wx.StaticText(self, wx.ID_ANY, "Wavenumber Discriminator")
        grid_sizer_4.Add(label_9, (2, 0), (1, 1), wx.ALL, 5)

        self.strans_wn_discrim = wx.TextCtrl(self, wx.ID_ANY, "")
        grid_sizer_4.Add(self.strans_wn_discrim, (2, 1), (1, 1), 0, 0)

        label_10 = wx.StaticText(self, wx.ID_ANY, "LOPT")
        label_10.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 1, ""))
        grid_sizer_4.Add(label_10, (3, 0), (1, 2), wx.BOTTOM | wx.RIGHT | wx.TOP, 5)

        label_11 = wx.StaticText(self, wx.ID_ANY, "Highlighted Line Discriminator")
        grid_sizer_4.Add(label_11, (4, 0), (1, 1), wx.ALL, 5)

        self.lopt_delwn_discrim = wx.TextCtrl(self, wx.ID_ANY, "")
        grid_sizer_4.Add(self.lopt_delwn_discrim, (4, 1), (1, 1), 0, 0)

        label_12 = wx.StaticText(self, wx.ID_ANY, "Line Plot Width (cm-1)")
        grid_sizer_4.Add(label_12, (5, 0), (1, 1), wx.ALL, 5)

        self.lopt_plot_width = wx.TextCtrl(self, wx.ID_ANY, "")
        grid_sizer_4.Add(self.lopt_plot_width, (5, 1), (1, 1), 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_TEXT, self.on_strans_wn_discrim, self.strans_wn_discrim)
        self.Bind(wx.EVT_TEXT, self.on_lopt_delwn_discrim, self.lopt_delwn_discrim)
        self.Bind(wx.EVT_TEXT, self.on_lopt_plot_width, self.lopt_plot_width)
        self.Bind(wx.EVT_BUTTON, self.on_ok, self.button_OK)
        # end wxGlade

    def on_strans_wn_discrim(self, event):  # wxGlade: propertiesDialog.<event_handler>
        print("Event handler 'on_strans_wn_discrim' not implemented!")
        event.Skip()

    def on_lopt_delwn_discrim(self, event):  # wxGlade: propertiesDialog.<event_handler>
        print("Event handler 'on_lopt_delwn_discrim' not implemented!")
        event.Skip()

    def on_lopt_plot_width(self, event):  # wxGlade: propertiesDialog.<event_handler>
        print("Event handler 'on_lopt_plot_width' not implemented!")
        event.Skip()

    def on_ok(self, event):  # wxGlade: propertiesDialog.<event_handler>
        print("Event handler 'on_ok' not implemented!")
        event.Skip()

# end of class propertiesDialog

class MyApp(wx.App):
    def OnInit(self):
        self.frame = mainWindow(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
